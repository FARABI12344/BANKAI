document.addEventListener('DOMContentLoaded', () => {
  const playButton = document.getElementById('play-button');
  const gameScreen = document.getElementById('game-screen');
  const dropContainer = document.getElementById('drop-container');
  const draggableContainer = document.getElementById('draggable-container');
  const resultDisplay = document.getElementById('result');

  const words = ["COOK", "GAME", "PLAY", "WORD", "DRAG"];
  let currentWordIndex = 0;

  playButton.addEventListener('click', startGame);

  function startGame() {
    playButton.style.display = 'none';
    gameScreen.style.display = 'block';
    loadWord();
  }

  function loadWord() {
    resultDisplay.textContent = "";
    dropContainer.innerHTML = "";
    draggableContainer.innerHTML = "";

    const word = words[currentWordIndex];

    // Create drop zones
    for (let i = 0; i < word.length; i++) {
      const zone = document.createElement('div');
      zone.classList.add('drop-zone');
      zone.dataset.index = i;
      dropContainer.appendChild(zone);
    }

    // Shuffle and place letters
    const shuffledLetters = shuffle(word.split(''));
    shuffledLetters.forEach(letter => {
      const letterElem = document.createElement('div');
      letterElem.classList.add('letter');
      letterElem.textContent = letter;

      const containerRect = draggableContainer.getBoundingClientRect();
      letterElem.style.left = Math.random() * (containerRect.width - 60) + 'px';
      letterElem.style.top = Math.random() * (containerRect.height - 60) + 'px';

      draggableContainer.appendChild(letterElem);
      makeDraggable(letterElem);
    });
  }

  function makeDraggable(elem) {
    let offsetX, offsetY, isDragging = false;
    let originalPos = { 
      x: parseFloat(elem.style.left), 
      y: parseFloat(elem.style.top) 
    };

    elem.addEventListener('mousedown', (e) => {
      isDragging = true;
      const rect = elem.getBoundingClientRect();
      offsetX = e.clientX - rect.left;
      offsetY = e.clientY - rect.top;
      elem.style.zIndex = 1000;
      elem.style.transition = 'none';
      e.preventDefault();
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      elem.style.left = (e.clientX - offsetX) + 'px';
      elem.style.top = (e.clientY - offsetY) + 'px';
    });

    document.addEventListener('mouseup', (e) => {
      if (!isDragging) return;
      isDragging = false;
      elem.style.transition = 'left 0.5s ease-out, top 0.5s ease-out';
      let dropped = false;

      document.querySelectorAll('.drop-zone').forEach(zone => {
        const rect = zone.getBoundingClientRect();
        if (
          e.clientX >= rect.left && e.clientX <= rect.right &&
          e.clientY >= rect.top && e.clientY <= rect.bottom
        ) {
          if (zone.children.length === 0) {
            zone.appendChild(elem);
            elem.style.position = 'relative';
            elem.style.left = '0';
            elem.style.top = '0';
            dropped = true;
          }
        }
      });

      if (!dropped) {
        if (elem.parentElement !== draggableContainer) {
          draggableContainer.appendChild(elem);
        }
        elem.style.position = 'absolute';
        elem.style.left = originalPos.x + 'px';
        elem.style.top = originalPos.y + 'px';
      }

      elem.style.zIndex = 1;
      checkWord();
    });
  }

  function checkWord() {
    const zones = document.querySelectorAll('.drop-zone');
    let assembled = "";
    let allFilled = true;

    zones.forEach(zone => {
      if (zone.children.length > 0) {
        assembled += zone.children[0].textContent;
      } else {
        allFilled = false;
      }
    });

    if (allFilled) {
      if (assembled === words[currentWordIndex]) {
        resultDisplay.textContent = "You win!";
      } else {
        resultDisplay.textContent = "Try again!";
      }
      currentWordIndex = (currentWordIndex + 1) % words.length;
      setTimeout(loadWord, 2000);
    }
  }

  function shuffle(array) {
    return array.sort(() => Math.random() - 0.5);
  }
});
